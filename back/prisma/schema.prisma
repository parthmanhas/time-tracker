// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model timer {
  id             String      @id @unique // Primary key
  title          String
  created_at     DateTime // Date of the timer
  completed_at   DateTime? // @default(now()) not working setting from node
  due_at         DateTime?
  remaining_time Int // Time left in seconds or milliseconds, depending on your preference
  duration       Int
  status         TimerStatus // Status of the timer
  user_id        String
  tags           tags[]
}

// Enum for status values
enum TimerStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

// model Comment {
//   id      Int    @id @default(autoincrement())
//   content String
//   Timer   Timer @relation(fields: [timerId], references: [id])
//   timerId Int
// }

model user {
  id                 String    @id @default(uuid())
  email              String    @unique
  name               String
  password           String
  reset_token        String?
  reset_token_expiry DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  tags               tags[]
}

// Add journal model
model journal {
  id         Int      @id @default(autoincrement())
  content    String
  user_id    String
  created_at DateTime @default(now())
}

enum GoalPriority {
  HIGH
  MEDIUM
  LOW
}

enum GoalType {
  TIME
  COUNT
}

model tags {
  id       Int    @id @default(autoincrement())
  tag      String
  goal_id  Int
  user_id  String
  timerid  String
  fk_users user   @relation(fields: [user_id], references: [id])
  fk_timer timer  @relation(fields: [timerid], references: [id])
  fk_goal  goal   @relation(fields: [goal_id], references: [id])
}

model goal {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  target_hours Float?
  target_count Int?
  current_count Int?        @default(0)
  type         GoalType     @default(TIME)
  priority     GoalPriority
  tags         tags[]
  user_id      String
  created_at   DateTime     @default(now())
  completed_at DateTime?
  is_active    Boolean      @default(true)
}
